package test.scala.histogrammar

import scala.language.postfixOps

import org.scalatest.FlatSpec
import org.scalatest.junit.JUnitRunner
import org.scalatest.Matchers

import org.dianahep.histogrammar._
import org.dianahep.histogrammar.json._

class AutogeneratedSuite extends FlatSpec with Matchers {
  case class Struct(bool: Boolean, int: Int, double: Double, string: String)

  // used for all equality operations, on both Container and Json subclasses
  val tolerance = 1e-12
  org.dianahep.histogrammar.util.relativeTolerance = tolerance
  org.dianahep.histogrammar.util.absoluteTolerance = tolerance

  def checkJson(x: Container[_]) {
    x.toJson should be (Factory.fromJson(x.toJson).toJson)
  }

  it must "summ" in {
    val x = Sum({x: Double => x + 1})
    x == x should be (true)
    x.ed == x.ed should be (true)
    x.hashCode should be (x.hashCode)
    x.ed.hashCode should be (x.ed.hashCode)
    x should be (x + x.zero)
    x.ed should be (x.ed + x.ed.zero)
    (x + x).ed should be (x.ed + x.ed)
    x.ed should be (Factory.fromJson(x.toJson))
    x.ed should be (Factory.fromJsonString(x.toJson.stringify))
    x.fill(3.4)
    Some(x.toJson) should be (Json.parse("""{"data": {"sum": 4.4, "entries": 1.0}, "version": "0.9", "type": "Sum"}"""))
    x == x should be (true)
    x.ed == x.ed should be (true)
    x.hashCode should be (x.hashCode)
    x.ed.hashCode should be (x.ed.hashCode)
    x should be (x + x.zero)
    x.ed should be (x.ed + x.ed.zero)
    (x + x).ed should be (x.ed + x.ed)
    x.ed should be (Factory.fromJson(x.toJson))
    x.ed should be (Factory.fromJsonString(x.toJson.stringify))
    x.fill(2.2)
    Some(x.toJson) should be (Json.parse("""{"data": {"sum": 7.6, "entries": 2.0}, "version": "0.9", "type": "Sum"}"""))
    x == x should be (true)
    x.ed == x.ed should be (true)
    x.hashCode should be (x.hashCode)
    x.ed.hashCode should be (x.ed.hashCode)
    x should be (x + x.zero)
    x.ed should be (x.ed + x.ed.zero)
    (x + x).ed should be (x.ed + x.ed)
    x.ed should be (Factory.fromJson(x.toJson))
    x.ed should be (Factory.fromJsonString(x.toJson.stringify))
    x.fill(-1.8)
    Some(x.toJson) should be (Json.parse("""{"data": {"sum": 6.8, "entries": 3.0}, "version": "0.9", "type": "Sum"}"""))
    x == x should be (true)
    x.ed == x.ed should be (true)
    x.hashCode should be (x.hashCode)
    x.ed.hashCode should be (x.ed.hashCode)
    x should be (x + x.zero)
    x.ed should be (x.ed + x.ed.zero)
    (x + x).ed should be (x.ed + x.ed)
    x.ed should be (Factory.fromJson(x.toJson))
    x.ed should be (Factory.fromJsonString(x.toJson.stringify))
    x.fill(0.0)
    Some(x.toJson) should be (Json.parse("""{"data": {"sum": 7.8, "entries": 4.0}, "version": "0.9", "type": "Sum"}"""))
    x == x should be (true)
    x.ed == x.ed should be (true)
    x.hashCode should be (x.hashCode)
    x.ed.hashCode should be (x.ed.hashCode)
    x should be (x + x.zero)
    x.ed should be (x.ed + x.ed.zero)
    (x + x).ed should be (x.ed + x.ed)
    x.ed should be (Factory.fromJson(x.toJson))
    x.ed should be (Factory.fromJsonString(x.toJson.stringify))
    x.fill(7.3)
    Some(x.toJson) should be (Json.parse("""{"data": {"sum": 16.1, "entries": 5.0}, "version": "0.9", "type": "Sum"}"""))
    x == x should be (true)
    x.ed == x.ed should be (true)
    x.hashCode should be (x.hashCode)
    x.ed.hashCode should be (x.ed.hashCode)
    x should be (x + x.zero)
    x.ed should be (x.ed + x.ed.zero)
    (x + x).ed should be (x.ed + x.ed)
    x.ed should be (Factory.fromJson(x.toJson))
    x.ed should be (Factory.fromJsonString(x.toJson.stringify))
    x.fill(-4.7)
    Some(x.toJson) should be (Json.parse("""{"data": {"sum": 12.399999999999999, "entries": 6.0}, "version": "0.9", "type": "Sum"}"""))
    x == x should be (true)
    x.ed == x.ed should be (true)
    x.hashCode should be (x.hashCode)
    x.ed.hashCode should be (x.ed.hashCode)
    x should be (x + x.zero)
    x.ed should be (x.ed + x.ed.zero)
    (x + x).ed should be (x.ed + x.ed)
    x.ed should be (Factory.fromJson(x.toJson))
    x.ed should be (Factory.fromJsonString(x.toJson.stringify))
    x.fill(1.6)
    Some(x.toJson) should be (Json.parse("""{"data": {"sum": 15.0, "entries": 7.0}, "version": "0.9", "type": "Sum"}"""))
    x == x should be (true)
    x.ed == x.ed should be (true)
    x.hashCode should be (x.hashCode)
    x.ed.hashCode should be (x.ed.hashCode)
    x should be (x + x.zero)
    x.ed should be (x.ed + x.ed.zero)
    (x + x).ed should be (x.ed + x.ed)
    x.ed should be (Factory.fromJson(x.toJson))
    x.ed should be (Factory.fromJsonString(x.toJson.stringify))
    x.fill(0.0)
    Some(x.toJson) should be (Json.parse("""{"data": {"sum": 16.0, "entries": 8.0}, "version": "0.9", "type": "Sum"}"""))
    x == x should be (true)
    x.ed == x.ed should be (true)
    x.hashCode should be (x.hashCode)
    x.ed.hashCode should be (x.ed.hashCode)
    x should be (x + x.zero)
    x.ed should be (x.ed + x.ed.zero)
    (x + x).ed should be (x.ed + x.ed)
    x.ed should be (Factory.fromJson(x.toJson))
    x.ed should be (Factory.fromJsonString(x.toJson.stringify))
    x.fill(-3.0)
    Some(x.toJson) should be (Json.parse("""{"data": {"sum": 14.0, "entries": 9.0}, "version": "0.9", "type": "Sum"}"""))
    x == x should be (true)
    x.ed == x.ed should be (true)
    x.hashCode should be (x.hashCode)
    x.ed.hashCode should be (x.ed.hashCode)
    x should be (x + x.zero)
    x.ed should be (x.ed + x.ed.zero)
    (x + x).ed should be (x.ed + x.ed)
    x.ed should be (Factory.fromJson(x.toJson))
    x.ed should be (Factory.fromJsonString(x.toJson.stringify))
    x.fill(-1.7)
    Some(x.toJson) should be (Json.parse("""{"data": {"sum": 13.3, "entries": 10.0}, "version": "0.9", "type": "Sum"}"""))
    x == x should be (true)
    x.ed == x.ed should be (true)
    x.hashCode should be (x.hashCode)
    x.ed.hashCode should be (x.ed.hashCode)
    x should be (x + x.zero)
    x.ed should be (x.ed + x.ed.zero)
    (x + x).ed should be (x.ed + x.ed)
    x.ed should be (Factory.fromJson(x.toJson))
    x.ed should be (Factory.fromJsonString(x.toJson.stringify))
  }

  it must "sumWithName" in {
    val x = Sum({x: Double => x + 1} named "something")
    x == x should be (true)
    x.ed == x.ed should be (true)
    x.hashCode should be (x.hashCode)
    x.ed.hashCode should be (x.ed.hashCode)
    x should be (x + x.zero)
    x.ed should be (x.ed + x.ed.zero)
    (x + x).ed should be (x.ed + x.ed)
    x.ed should be (Factory.fromJson(x.toJson))
    x.ed should be (Factory.fromJsonString(x.toJson.stringify))
    x.fill(3.4)
    Some(x.toJson) should be (Json.parse("""{"data": {"sum": 4.4, "name": "something", "entries": 1.0}, "version": "0.9", "type": "Sum"}"""))
    x == x should be (true)
    x.ed == x.ed should be (true)
    x.hashCode should be (x.hashCode)
    x.ed.hashCode should be (x.ed.hashCode)
    x should be (x + x.zero)
    x.ed should be (x.ed + x.ed.zero)
    (x + x).ed should be (x.ed + x.ed)
    x.ed should be (Factory.fromJson(x.toJson))
    x.ed should be (Factory.fromJsonString(x.toJson.stringify))
    x.fill(2.2)
    Some(x.toJson) should be (Json.parse("""{"data": {"sum": 7.6, "name": "something", "entries": 2.0}, "version": "0.9", "type": "Sum"}"""))
    x == x should be (true)
    x.ed == x.ed should be (true)
    x.hashCode should be (x.hashCode)
    x.ed.hashCode should be (x.ed.hashCode)
    x should be (x + x.zero)
    x.ed should be (x.ed + x.ed.zero)
    (x + x).ed should be (x.ed + x.ed)
    x.ed should be (Factory.fromJson(x.toJson))
    x.ed should be (Factory.fromJsonString(x.toJson.stringify))
    x.fill(-1.8)
    Some(x.toJson) should be (Json.parse("""{"data": {"sum": 6.8, "name": "something", "entries": 3.0}, "version": "0.9", "type": "Sum"}"""))
    x == x should be (true)
    x.ed == x.ed should be (true)
    x.hashCode should be (x.hashCode)
    x.ed.hashCode should be (x.ed.hashCode)
    x should be (x + x.zero)
    x.ed should be (x.ed + x.ed.zero)
    (x + x).ed should be (x.ed + x.ed)
    x.ed should be (Factory.fromJson(x.toJson))
    x.ed should be (Factory.fromJsonString(x.toJson.stringify))
    x.fill(0.0)
    Some(x.toJson) should be (Json.parse("""{"data": {"sum": 7.8, "name": "something", "entries": 4.0}, "version": "0.9", "type": "Sum"}"""))
    x == x should be (true)
    x.ed == x.ed should be (true)
    x.hashCode should be (x.hashCode)
    x.ed.hashCode should be (x.ed.hashCode)
    x should be (x + x.zero)
    x.ed should be (x.ed + x.ed.zero)
    (x + x).ed should be (x.ed + x.ed)
    x.ed should be (Factory.fromJson(x.toJson))
    x.ed should be (Factory.fromJsonString(x.toJson.stringify))
    x.fill(7.3)
    Some(x.toJson) should be (Json.parse("""{"data": {"sum": 16.1, "name": "something", "entries": 5.0}, "version": "0.9", "type": "Sum"}"""))
    x == x should be (true)
    x.ed == x.ed should be (true)
    x.hashCode should be (x.hashCode)
    x.ed.hashCode should be (x.ed.hashCode)
    x should be (x + x.zero)
    x.ed should be (x.ed + x.ed.zero)
    (x + x).ed should be (x.ed + x.ed)
    x.ed should be (Factory.fromJson(x.toJson))
    x.ed should be (Factory.fromJsonString(x.toJson.stringify))
    x.fill(-4.7)
    Some(x.toJson) should be (Json.parse("""{"data": {"sum": 12.399999999999999, "name": "something", "entries": 6.0}, "version": "0.9", "type": "Sum"}"""))
    x == x should be (true)
    x.ed == x.ed should be (true)
    x.hashCode should be (x.hashCode)
    x.ed.hashCode should be (x.ed.hashCode)
    x should be (x + x.zero)
    x.ed should be (x.ed + x.ed.zero)
    (x + x).ed should be (x.ed + x.ed)
    x.ed should be (Factory.fromJson(x.toJson))
    x.ed should be (Factory.fromJsonString(x.toJson.stringify))
    x.fill(1.6)
    Some(x.toJson) should be (Json.parse("""{"data": {"sum": 15.0, "name": "something", "entries": 7.0}, "version": "0.9", "type": "Sum"}"""))
    x == x should be (true)
    x.ed == x.ed should be (true)
    x.hashCode should be (x.hashCode)
    x.ed.hashCode should be (x.ed.hashCode)
    x should be (x + x.zero)
    x.ed should be (x.ed + x.ed.zero)
    (x + x).ed should be (x.ed + x.ed)
    x.ed should be (Factory.fromJson(x.toJson))
    x.ed should be (Factory.fromJsonString(x.toJson.stringify))
    x.fill(0.0)
    Some(x.toJson) should be (Json.parse("""{"data": {"sum": 16.0, "name": "something", "entries": 8.0}, "version": "0.9", "type": "Sum"}"""))
    x == x should be (true)
    x.ed == x.ed should be (true)
    x.hashCode should be (x.hashCode)
    x.ed.hashCode should be (x.ed.hashCode)
    x should be (x + x.zero)
    x.ed should be (x.ed + x.ed.zero)
    (x + x).ed should be (x.ed + x.ed)
    x.ed should be (Factory.fromJson(x.toJson))
    x.ed should be (Factory.fromJsonString(x.toJson.stringify))
    x.fill(-3.0)
    Some(x.toJson) should be (Json.parse("""{"data": {"sum": 14.0, "name": "something", "entries": 9.0}, "version": "0.9", "type": "Sum"}"""))
    x == x should be (true)
    x.ed == x.ed should be (true)
    x.hashCode should be (x.hashCode)
    x.ed.hashCode should be (x.ed.hashCode)
    x should be (x + x.zero)
    x.ed should be (x.ed + x.ed.zero)
    (x + x).ed should be (x.ed + x.ed)
    x.ed should be (Factory.fromJson(x.toJson))
    x.ed should be (Factory.fromJsonString(x.toJson.stringify))
    x.fill(-1.7)
    Some(x.toJson) should be (Json.parse("""{"data": {"sum": 13.3, "name": "something", "entries": 10.0}, "version": "0.9", "type": "Sum"}"""))
    x == x should be (true)
    x.ed == x.ed should be (true)
    x.hashCode should be (x.hashCode)
    x.ed.hashCode should be (x.ed.hashCode)
    x should be (x + x.zero)
    x.ed should be (x.ed + x.ed.zero)
    (x + x).ed should be (x.ed + x.ed)
    x.ed should be (Factory.fromJson(x.toJson))
    x.ed should be (Factory.fromJsonString(x.toJson.stringify))
  }

  it must "sumStruct" in {
    val x = Sum({x: Struct => x.double + 1})
    x == x should be (true)
    x.ed == x.ed should be (true)
    x.hashCode should be (x.hashCode)
    x.ed.hashCode should be (x.ed.hashCode)
    x should be (x + x.zero)
    x.ed should be (x.ed + x.ed.zero)
    (x + x).ed should be (x.ed + x.ed)
    x.ed should be (Factory.fromJson(x.toJson))
    x.ed should be (Factory.fromJsonString(x.toJson.stringify))
    x.fill(Struct(true, -2, 3.4, "one"))
    Some(x.toJson) should be (Json.parse("""{"data": {"sum": 4.4, "entries": 1.0}, "version": "0.9", "type": "Sum"}"""))
    x == x should be (true)
    x.ed == x.ed should be (true)
    x.hashCode should be (x.hashCode)
    x.ed.hashCode should be (x.ed.hashCode)
    x should be (x + x.zero)
    x.ed should be (x.ed + x.ed.zero)
    (x + x).ed should be (x.ed + x.ed)
    x.ed should be (Factory.fromJson(x.toJson))
    x.ed should be (Factory.fromJsonString(x.toJson.stringify))
    x.fill(Struct(false, -1, 2.2, "two"))
    Some(x.toJson) should be (Json.parse("""{"data": {"sum": 7.6, "entries": 2.0}, "version": "0.9", "type": "Sum"}"""))
    x == x should be (true)
    x.ed == x.ed should be (true)
    x.hashCode should be (x.hashCode)
    x.ed.hashCode should be (x.ed.hashCode)
    x should be (x + x.zero)
    x.ed should be (x.ed + x.ed.zero)
    (x + x).ed should be (x.ed + x.ed)
    x.ed should be (Factory.fromJson(x.toJson))
    x.ed should be (Factory.fromJsonString(x.toJson.stringify))
    x.fill(Struct(true, 0, -1.8, "three"))
    Some(x.toJson) should be (Json.parse("""{"data": {"sum": 6.8, "entries": 3.0}, "version": "0.9", "type": "Sum"}"""))
    x == x should be (true)
    x.ed == x.ed should be (true)
    x.hashCode should be (x.hashCode)
    x.ed.hashCode should be (x.ed.hashCode)
    x should be (x + x.zero)
    x.ed should be (x.ed + x.ed.zero)
    (x + x).ed should be (x.ed + x.ed)
    x.ed should be (Factory.fromJson(x.toJson))
    x.ed should be (Factory.fromJsonString(x.toJson.stringify))
    x.fill(Struct(false, 1, 0.0, "four"))
    Some(x.toJson) should be (Json.parse("""{"data": {"sum": 7.8, "entries": 4.0}, "version": "0.9", "type": "Sum"}"""))
    x == x should be (true)
    x.ed == x.ed should be (true)
    x.hashCode should be (x.hashCode)
    x.ed.hashCode should be (x.ed.hashCode)
    x should be (x + x.zero)
    x.ed should be (x.ed + x.ed.zero)
    (x + x).ed should be (x.ed + x.ed)
    x.ed should be (Factory.fromJson(x.toJson))
    x.ed should be (Factory.fromJsonString(x.toJson.stringify))
    x.fill(Struct(false, 2, 7.3, "five"))
    Some(x.toJson) should be (Json.parse("""{"data": {"sum": 16.1, "entries": 5.0}, "version": "0.9", "type": "Sum"}"""))
    x == x should be (true)
    x.ed == x.ed should be (true)
    x.hashCode should be (x.hashCode)
    x.ed.hashCode should be (x.ed.hashCode)
    x should be (x + x.zero)
    x.ed should be (x.ed + x.ed.zero)
    (x + x).ed should be (x.ed + x.ed)
    x.ed should be (Factory.fromJson(x.toJson))
    x.ed should be (Factory.fromJsonString(x.toJson.stringify))
    x.fill(Struct(false, 3, -4.7, "six"))
    Some(x.toJson) should be (Json.parse("""{"data": {"sum": 12.399999999999999, "entries": 6.0}, "version": "0.9", "type": "Sum"}"""))
    x == x should be (true)
    x.ed == x.ed should be (true)
    x.hashCode should be (x.hashCode)
    x.ed.hashCode should be (x.ed.hashCode)
    x should be (x + x.zero)
    x.ed should be (x.ed + x.ed.zero)
    (x + x).ed should be (x.ed + x.ed)
    x.ed should be (Factory.fromJson(x.toJson))
    x.ed should be (Factory.fromJsonString(x.toJson.stringify))
    x.fill(Struct(true, 4, 1.6, "seven"))
    Some(x.toJson) should be (Json.parse("""{"data": {"sum": 15.0, "entries": 7.0}, "version": "0.9", "type": "Sum"}"""))
    x == x should be (true)
    x.ed == x.ed should be (true)
    x.hashCode should be (x.hashCode)
    x.ed.hashCode should be (x.ed.hashCode)
    x should be (x + x.zero)
    x.ed should be (x.ed + x.ed.zero)
    (x + x).ed should be (x.ed + x.ed)
    x.ed should be (Factory.fromJson(x.toJson))
    x.ed should be (Factory.fromJsonString(x.toJson.stringify))
    x.fill(Struct(true, 5, 0.0, "eight"))
    Some(x.toJson) should be (Json.parse("""{"data": {"sum": 16.0, "entries": 8.0}, "version": "0.9", "type": "Sum"}"""))
    x == x should be (true)
    x.ed == x.ed should be (true)
    x.hashCode should be (x.hashCode)
    x.ed.hashCode should be (x.ed.hashCode)
    x should be (x + x.zero)
    x.ed should be (x.ed + x.ed.zero)
    (x + x).ed should be (x.ed + x.ed)
    x.ed should be (Factory.fromJson(x.toJson))
    x.ed should be (Factory.fromJsonString(x.toJson.stringify))
    x.fill(Struct(false, 6, -3.0, "nine"))
    Some(x.toJson) should be (Json.parse("""{"data": {"sum": 14.0, "entries": 9.0}, "version": "0.9", "type": "Sum"}"""))
    x == x should be (true)
    x.ed == x.ed should be (true)
    x.hashCode should be (x.hashCode)
    x.ed.hashCode should be (x.ed.hashCode)
    x should be (x + x.zero)
    x.ed should be (x.ed + x.ed.zero)
    (x + x).ed should be (x.ed + x.ed)
    x.ed should be (Factory.fromJson(x.toJson))
    x.ed should be (Factory.fromJsonString(x.toJson.stringify))
    x.fill(Struct(true, 7, -1.7, "ten"))
    Some(x.toJson) should be (Json.parse("""{"data": {"sum": 13.3, "entries": 10.0}, "version": "0.9", "type": "Sum"}"""))
    x == x should be (true)
    x.ed == x.ed should be (true)
    x.hashCode should be (x.hashCode)
    x.ed.hashCode should be (x.ed.hashCode)
    x should be (x + x.zero)
    x.ed should be (x.ed + x.ed.zero)
    (x + x).ed should be (x.ed + x.ed)
    x.ed should be (Factory.fromJson(x.toJson))
    x.ed should be (Factory.fromJsonString(x.toJson.stringify))
  }
}
